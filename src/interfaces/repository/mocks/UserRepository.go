// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/hieuphq/califit/src/domain/model"
import repository "github.com/hieuphq/califit/src/interfaces/repository"

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// FindAll provides a mock function with given fields: repo, param
func (_m *UserRepository) FindAll(repo repository.DBRepo, param repository.QueryParam) ([]model.User, error) {
	ret := _m.Called(repo, param)

	var r0 []model.User
	if rf, ok := ret.Get(0).(func(repository.DBRepo, repository.QueryParam) []model.User); ok {
		r0 = rf(repo, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repository.DBRepo, repository.QueryParam) error); ok {
		r1 = rf(repo, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByEmail provides a mock function with given fields: repo, email
func (_m *UserRepository) FindByEmail(repo repository.DBRepo, email string) (*model.User, error) {
	ret := _m.Called(repo, email)

	var r0 *model.User
	if rf, ok := ret.Get(0).(func(repository.DBRepo, string) *model.User); ok {
		r0 = rf(repo, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(repository.DBRepo, string) error); ok {
		r1 = rf(repo, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: repo, user
func (_m *UserRepository) Save(repo repository.DBRepo, user *model.User) error {
	ret := _m.Called(repo, user)

	var r0 error
	if rf, ok := ret.Get(0).(func(repository.DBRepo, *model.User) error); ok {
		r0 = rf(repo, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
